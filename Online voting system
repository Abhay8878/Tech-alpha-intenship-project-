import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class Voter {
    private String id;
    private String name;

    public Voter(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

class Candidate {
    private String id;
    private String name;

    public Candidate(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

class Vote {
    private Voter voter;
    private Candidate candidate;

    public Vote(Voter voter, Candidate candidate) {
        this.voter = voter;
        this.candidate = candidate;
    }

    public Voter getVoter() {
        return voter;
    }

    public Candidate getCandidate() {
        return candidate;
    }
}

class VotingSystem {
    private List<Voter> voters;
    private List<Candidate> candidates;
    private List<Vote> votes;

    public VotingSystem() {
        voters = new ArrayList<>();
        candidates = new ArrayList<>();
        votes = new ArrayList<>();
    }

    public void addVoter(Voter voter) {
        voters.add(voter);
    }

    public void addCandidate(Candidate candidate) {
        candidates.add(candidate);
    }

    public void castVote(String voterId, String candidateId) {
        Voter voter = findVoterById(voterId);
        Candidate candidate = findCandidateById(candidateId);

        if (voter != null && candidate != null) {
            votes.add(new Vote(voter, candidate));
            System.out.println("Vote cast successfully!");
        } else {
            System.out.println("Invalid voter ID or candidate ID.");
        }
    }

    public void tallyVotes() {
        Map<String, Integer> voteCount = new HashMap<>();

        for (Vote vote : votes) {
            String candidateId = vote.getCandidate().getId();
            voteCount.put(candidateId, voteCount.getOrDefault(candidateId, 0) + 1);
        }

        for (Candidate candidate : candidates) {
            System.out.println(candidate.getName() + ": " + voteCount.getOrDefault(candidate.getId(), 0) + " votes");
        }
    }

    private Voter findVoterById(String id) {
        for (Voter voter : voters) {
            if (voter.getId().equals(id)) {
                return voter;
            }
        }
        return null;
    }

    private Candidate findCandidateById(String id) {
        for (Candidate candidate : candidates) {
            if (candidate.getId().equals(id)) {
                return candidate;
            }
        }
        return null;
    }
}

public class OnlineVotingSystem {
    public static void main(String[] args) {
        VotingSystem votingSystem = new VotingSystem();

        
        votingSystem.addVoter(new Voter("V1", "Alice"));
        votingSystem.addVoter(new Voter("V2", "Bob"));

        
        votingSystem.addCandidate(new Candidate("C1", "John"));
        votingSystem.addCandidate(new Candidate("C2", "Jane"));

        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter voter ID:");
        String voterId = scanner.nextLine();

        System.out.println("Enter candidate ID:");
        String candidateId = scanner.nextLine();

        votingSystem.castVote(voterId, candidateId);
        votingSystem.tallyVotes();

        scanner.close();
    }
}
